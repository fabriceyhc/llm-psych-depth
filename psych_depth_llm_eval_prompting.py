# -*- coding: utf-8 -*-
"""psych-depth-llm-eval-prompting

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RSV6yHuRIAuHt4XrMMMjRg8VEDvYcaJy
"""

!pip install langchain

!git clone https://github.com/fabriceyhc/llm-psych-depth.git

import os
import glob
import json
import zipfile
import numpy as np
import pandas as pd

from langchain.llms.fake import FakeListLLM
from langchain.prompts.chat import (
    PromptTemplate,
    ChatPromptTemplate,
    SystemMessagePromptTemplate,
    HumanMessagePromptTemplate,
)
from langchain.output_parsers import PydanticOutputParser
from pydantic import BaseModel, Field, validator

"""## Helper Functions"""

def load_markdown_files_from_directory(directory_path):
    # Iterate over markdown files in the specified directory
    markdown_files = glob.glob(os.path.join(directory_path, '*.md'))
    # Load each markdown file into memory and rename keys to just titles
    content_dict = {}
    for file in markdown_files:
        with open(file, 'r') as f:
            title = os.path.basename(file).split('. ')[1].replace('.md', '')
            content_dict[title] = f.read()
    return content_dict

def prepare_prompt_for_ui(chat_message_prompt_list):
    return f"{chat_message_prompt_list[0].to_json()['kwargs']['content']}\n{chat_message_prompt_list[-1].to_json()['kwargs']['content']}"

def zip_json_files(folder_path, output_zip):
    if not output_zip.endswith(".zip"):
        output_zip += ".zip"
    with zipfile.ZipFile(output_zip, 'w') as zipf:
        for foldername, subfolders, filenames in os.walk(folder_path):
            for filename in filenames:
                if filename.endswith('.json'):
                    # Construct complete filepath
                    file_path = os.path.join(foldername, filename)
                    # Add file to the zip archive
                    zipf.write(file_path, os.path.relpath(file_path, folder_path))

def load_json_files_into_dataframe(directory_path, substring):
    """
    Load JSON files from a directory into a pandas DataFrame based on a desired profile_id.

    Parameters:
    - directory_path (str): The path to the directory containing the JSON files.
    - substring (int): The profile_id value to filter by.

    Returns:
    - DataFrame: A pandas DataFrame containing the combined content of the JSON files.
    """

    # Function to clean and parse JSON content
    def clean_and_parse_json(content):
        cleaned_content = content.split("```\n")[0]
        return json.loads(cleaned_content)

    # Get the list of JSON files with the desired profile_id
    json_files = [f for f in os.listdir(directory_path) if f.endswith('.json')]
    desired_files = [f for f in json_files if substring in f]

    # List to store DataFrames
    df_list = []

    # Iterate over all desired files, clean them, and load into DataFrame
    for file in desired_files:
        filepath = os.path.join(directory_path, file)
        with open(filepath, 'r') as f:
            content = f.read()
            parsed_data = clean_and_parse_json(content)
            df_temp = pd.DataFrame([parsed_data])
            df_list.append(df_temp)

    # Concatenate all DataFrames into a single DataFrame
    df_combined = pd.concat(df_list, ignore_index=True)

    return df_combined

"""## Prompt Template"""

class PsychDepthEval(BaseModel):
    authentic_explanation:            str   = Field(description="explanation of authenticity score")
    authentic_score:                  float = Field(description="degree to which the writing is authentic")
    emotion_provoking_explanation:    str   = Field(description="explanation of emotion provoking score")
    emotion_provoking_score:          float = Field(description="degree to which the writing is emotion provoking")
    empathy_explanation:              str   = Field(description="explanation of empathy score")
    empathy_score:                    float = Field(description="degree to which the writing is empathetic")
    engagement_explanation:           str   = Field(description="explanation of engagement score")
    engagement_score:                 float = Field(description="degree to which the writing is engaging")
    narrative_complexity_explanation: str   = Field(description="explanation of narrative complexity score")
    narrative_complexity_score:       float = Field(description="degree to which the writing is narratively complex")

# system_profiles = [
#     "Step into the shoes of a novelist renowned for weaving psychologically profound narratives. With your deep understanding of the human psyche and its representation in literature, assess the given piece. Look for elements of authenticity, the nuances in emotional depiction, the evocation of empathy, the depth of engagement, and the richness of narrative complexity. Provide ratings for each aspect from 1 to 5.",
#     "You are a literary therapist, someone who uses literature as a medium for healing and introspection. Your focus is on how deeply a text can touch the human soul and psyche. Evaluate the given writing based on its authenticity, its ability to provoke genuine emotions, its capacity to inspire empathy, the level of engagement it offers, and the complexity of its narrative. Provide a rating from 1 to 5 for each of these components.",
#     "You are an experienced psychologist with a keen interest in literature. Drawing from your knowledge of human emotions, behaviors, and relationships, evaluate the depth of the presented text. Examine it for authenticity, the power to evoke emotions, the capacity to foster empathy in readers, engagement levels, and narrative complexity. Rate each dimension on a 1-5 scale.",
#     "You are a seasoned literary critic specializing in psychological depth in literature. Your focus is on evaluating the authenticity, emotion-provoking ability, empathy, engagement, and narrative complexity of a piece of writing. Use your expertise to assess these components based on the given criteria, rating each on a scale of 1-5.",
#     "Imagine you're a professor teaching a course on psychological literature. You've spent years analyzing the intricacies of characters, emotions, and the human psyche as portrayed in literature. Your task is to evaluate the writing in front of you based on its psychological depth, considering factors such as authenticity, emotion provocation, empathy, engagement, and narrative complexity. Rate each component on a scale of 1-5 based on the depth and nuance with which the writing addresses them.",
#     # explicitly prompted to be more critical
#     "You are a renowned literary editor known for your rigorous standards and belief that growth emerges from honest critique. While you acknowledge strengths, you don't shy away from pointing out areas for improvement. Analyze the text for its psychological depth, prioritizing authenticity, emotion evocation, empathy, engagement, and narrative complexity. Remember, your constructive criticism has shaped many great works. Rate each dimension on a 1-5 scale.",
#     "As a mentor to many budding authors, you've always maintained that true growth comes from facing one's shortcomings head-on. Step into this role of a strict yet fair evaluator. Scrutinize the writing for its authenticity, its portrayal of emotions, its ability to foster empathy, the depth of engagement, and the complexity of its narrative. Offer ratings from 1 to 5, but remember, a 5 should be reserved for only the most exceptional pieces.",
#     "You are a literary jury member for a prestigious award, known for setting high benchmarks in literature. It's said that earning a commendation from you is a true testament to a work's quality. With this reputation, critically assess the writing's psychological depth. Look for authenticity, emotional depth, empathy, engagement, and narrative complexity. While you appreciate the effort behind every piece, you're here to identify true excellence. Rate each aspect on a scale of 1 to 5.",
# ]

system_profiles = [
"""
You are a renowned literary critic known for your incisive and rigorous analysis.
Your expertise lies in the study of psychological depth in literature.
Your reputation is built on your ability to assess writing with both precision and fairness.
You aren't easily swayed by superficial charm and always prioritize substance over style.
You believe very strongly that the only way to be kind and compassionate to a writer is
to provide honest and constructive feedback, especially when there is room for improvement.
Offer feedback that is candid and honest, but also constructive.
"""
]

task = """
Your task is composed of the following steps:
1. Review the given components of psychological depth: authenticity, emotion
provoking, empathy, engagement, and narrative complexity. Be sure to understand
each concept and the questions that characterize them.
2. Read a given story, paying special attention to components of psychological depth.
3. Think step by step and explain the degree to which each component of psychological
depth is evident in the story.
4. Assign a rating for each component from 1 to 5. 1 is greatly below average, 3 is
average and 5 is greatly above average (should be rare to provide this score).
"""

component_desc = """
For our purposes, psychological depth is composed of the following concepts, each illustrated by several questions:

- Authenticity
	- Does the writing feel true to real human experiences?
	- Does it represent psychological processes in a way that feels authentic and believable?
- Emotion Provoking
	- How well does the writing depict emotional experiences?
	- Does it explore the nuances of the characters' emotional states, rather than just describing them in simple terms?
	- Can the writing show rather than tell a wide variety of emotions?
	- Do the emotions that are shown in the text make sense in the context of the story?
- Empathy
	- Do you feel like you were able to empathize with the characters and situations in the text?
	- Do you feel that the text led you to introspection, or to new insights about yourself or the world?"
- Engagement
	- Does the text engage you on an emotional and psychological level?
	- Do you feel the need to keep reading as you read the text?
- Narrative Complexity
	- Do the characters in the story have multifaceted personalities? Are they developed beyond stereotypes or tropes? Do they exhibit internal conflicts?
	- Does the writing explore the complexities of relationships between characters?
	- Does it delve into the intricacies of conflicts and their partial or complete resolutions?
"""

writing_prompt = """
**Task**:
---------
{task}

**Evaluation Components**:
-------------------------
{component_desc}

**Story Title**:
----------------
{title}

**Story Content**:
------------------
{story}

**Format Instructions**:
-----------------------
{format_instructions}
"""

"""### Generating Complete Prompts with Stories"""

directory_path = './llm-psych-depth/data/v2/stories_for_annotation'
stories = load_markdown_files_from_directory(directory_path)

json_dir = "./llm-psych-depth/gpt4_story_generation_results/v1/"
results_df = load_json_files_into_dataframe(json_dir, "profile_id=0").sort_values(by='title')
stories = list(zip(results_df["title"], results_df["output_story"]))

parser = PydanticOutputParser(pydantic_object=PsychDepthEval)

prompts_to_run = []
for profile_id, system_profile in enumerate(system_profiles):
    for idx, (title, story) in enumerate(stories):
        system_profile_prompt = SystemMessagePromptTemplate.from_template(system_profile)
        story_prompt = HumanMessagePromptTemplate.from_template(writing_prompt)
        chat_prompt = ChatPromptTemplate(
            messages=[system_profile_prompt, story_prompt],
            partial_variables={"format_instructions": parser.get_format_instructions()},
            template_format='jinja2',
            output_parser=parser,
        )
        _input = chat_prompt.format_messages(task=task,
                                             component_desc=component_desc,
                                             title=title,
                                             story=story)
        prompts_to_run.append({
            "profile_id": profile_id,
            "title": title,
            "story": story,
            "prompt_to_run": prepare_prompt_for_ui(_input)
        })

# persist the prompts to a directory

save_dir = "./gpt4_prompt_results"
os.makedirs(save_dir, exist_ok=True)

for run in prompts_to_run:
    print(run["prompt_to_run"])
    with open(os.path.join(save_dir, f"{run['title']}.profile_id={run['profile_id']}.json"), 'w') as f:
        json.dump(run, f, indent=4)

zip_json_files(save_dir, save_dir)

# example gpt4 output
{
  "authentic_score": "5",
  "authentic_explanation": "The story presents an authentic representation of a relationship's evolution, capturing the emotions and events experienced over time. It dives deep into real-life events, from small missteps on a first date to the profound challenges of infidelity and parenthood.",

  "emotion_provoking_score": "5",
  "emotion_provoking_explanation": "The reader can feel the protagonist's journey through happiness, love, betrayal, anger, and finally, acceptance. The story effectively invokes a broad range of emotions, making it both heartwarming and heartbreaking.",

  "empathy_score": "4",
  "empathy_explanation": "The story allows readers to easily empathize with the protagonist's experiences. However, there's limited insight into the partner's perspective, leaving some gaps in understanding the entirety of the relationship.",

  "engagement_score": "5",
  "engagement_explanation": "The consistent use of the 'one word' framework keeps the reader engaged, making them eager to find out what each phase of the relationship will be labeled. Additionally, the pacing is well-balanced, revealing the relationship's progression naturally.",

  "narrative_complexity_score": "4",
  "narrative_complexity_explanation": "The narrative offers complexity through its exploration of a relationship over many years. However, the story could benefit from a deeper exploration of some events, particularly around the challenges faced after becoming parents."
}

prompts_to_run.sort(key=lambda x: x['title'])
prompts_to_run.sort(key=lambda x: x['profile_id'])

for prompt_to_run in prompts_to_run:
    print(prompt_to_run["profile_id"])
    print(prompt_to_run["prompt_to_run"])
    print("=" * 50)

prompt_to_run = prompts_to_run[1]
print(prompt_to_run["title"])
print("=" * 50)
print(prompt_to_run["prompt_to_run"])